// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentGateway.Persistence;

namespace PaymentGateway.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentGateway.Domain.MerchantAggregate.Merchant", b =>
                {
                    b.Property<Guid>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MerchantId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("PaymentGateway.Domain.PaymentAggregate.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ExternalShopperIdentifier")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentOrderUniqueIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentGateway.Domain.MerchantAggregate.Merchant", b =>
                {
                    b.OwnsOne("PaymentGateway.Domain.SharedValueTypes.CreditCardInformation", "CreditCardInformation", b1 =>
                        {
                            b1.Property<Guid>("MerchantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CardNumber")
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100);

                            b1.Property<int>("Ccv")
                                .HasColumnType("int")
                                .HasMaxLength(5);

                            b1.HasKey("MerchantId");

                            b1.ToTable("Merchants");

                            b1.WithOwner()
                                .HasForeignKey("MerchantId");

                            b1.OwnsOne("PaymentGateway.Domain.SharedValueTypes.ExpiryDate", "ExpiryDate", b2 =>
                                {
                                    b2.Property<Guid>("CreditCardInformationMerchantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Month")
                                        .HasColumnType("int");

                                    b2.Property<int>("Year")
                                        .HasColumnType("int");

                                    b2.HasKey("CreditCardInformationMerchantId");

                                    b2.ToTable("Merchants");

                                    b2.WithOwner()
                                        .HasForeignKey("CreditCardInformationMerchantId");
                                });
                        });
                });

            modelBuilder.Entity("PaymentGateway.Domain.PaymentAggregate.Payment", b =>
                {
                    b.OwnsOne("PaymentGateway.Domain.PaymentAggregate.PaymentAmount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("CurrencyCode")
                                .HasColumnType("nvarchar(5)")
                                .HasMaxLength(5);

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("PaymentGateway.Domain.SharedValueTypes.CreditCardInformation", "CreditCardInformation", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CardNumber")
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100);

                            b1.Property<int>("Ccv")
                                .HasColumnType("int")
                                .HasMaxLength(5);

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");

                            b1.OwnsOne("PaymentGateway.Domain.SharedValueTypes.ExpiryDate", "ExpiryDate", b2 =>
                                {
                                    b2.Property<Guid>("CreditCardInformationPaymentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Month")
                                        .HasColumnType("int");

                                    b2.Property<int>("Year")
                                        .HasColumnType("int");

                                    b2.HasKey("CreditCardInformationPaymentId");

                                    b2.ToTable("Payments");

                                    b2.WithOwner()
                                        .HasForeignKey("CreditCardInformationPaymentId");
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
